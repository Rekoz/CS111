Name: Yunong Jiang
UCLA ID: 204466452


-------------------------------------------------------------------------------

Response to Exercise 1:
	 Yes. Since the pid is already stored in the current process's %eax register, 
it won't be affected even though other processes run before the process calling sys_getpid()
eventually runs again.




Anything else you'd like us to know:
	 In exercise 3, I added one members to the stuct process_t. It is a pointer
pointing to the process that waits for the current process to finish. Initially it 
is NULL. Also we have to delete "current->p_registers.reg_eax = WAIT_TRYAGAIN;".
Otherwise sys_wait(p) will be executed twice.



Extra credit exercises:

Exercise 5
	int x = 0; // note that local variable x lives on the stack
	int * volatile y = &x; // y points to the address of x
	pid_t p = sys_fork();
	if (p == 0)
	  *y = x = 1; // here y still points to the address of parent's x
	else if (p > 0)
	  sys_wait(p); // assume blocking implementation
	app_printf("%d", x);
	sys_exit(0);

Exercise 6
	In mpos.h:
	    changed
		#define INT_SYS_USER1		53
	    to 
	        #define INT_SYS_THREAD		53
	In mpos-app.h:
	    Added a new function (line 166-184): 
	    static inline pid_t sys_newthread(void (*start_function)(void))
	    {
		pid_t result;
  		asm volatile("int %1\n"
		     : "=a" (result)
		     : "i" (INT_SYS_THREAD),
		       "a" (start_function),
		     : "cc", "memory");
		return result;
	    }
	In mpos-kern.c:
	   Added a line (line 132):
	   	 static pid_t do_newthread(void (*start_function)(void));
	   Added a new case in interrupt (line 162-164):
	   case INT_SYS_THREAD:
	        current->p_registers.reg_eax = do_newthread(current, current->p_registers.reg_eax);
		run(current);
	   Added a new function (line 355-378):
	   static pid_t
	   do_newthread(process_t *parent, void* start_function)
	   {
 	    // find an empty process
 	     int i;
 	      for (i = 1; i < NPROCS; i++)
  	        if (proc_array[i].p_state == P_EMPTY)
      		   break;
  	     if (i == NPROCS) return -1; // no empty space
  	     process_t* current = &proc_array[i];
  	     current->p_registers.reg_eax = 0; // sys_fork() should return 0 to child process
  	     current->p_registers.reg_esp = PROC1_STACK_ADDR + PROC_STACK_SIZE * i; // set the stack pointer to the bottom of the stack, i.e. empty the stack
  	     current->p_registers.reg_eip = (uint32_t)start_function; // the execution should start from start_function
  	     current->p_state = P_RUNNABLE; // set the process as runnable
  	     return current->p_pid;
	   }

Exercise 7:
	In mpos.h:
	    changed
		#define INT_SYS_USER2		54
	    to
		#define INT_SYS_KILL		54
	In mpos-kern.c:
	   added a new case INT_SYS_KILL:
	    case INT_SYS_KILL: {
	  	 pid_t p = current->p_registers.reg_eax;
		 if (p <= 0 || p >= NPROCS || p == current->p_pid
		       || proc_array[p].p_state == P_EMPTY)
		       current->p_registers.reg_eax = -1;
	  	 else if (proc_array[p].p_state == P_ZOMBIE) 
	              // if it is already a zombie, just clean the corpse
		  {
		        current->p_registers.reg_eax = 0; // 0 means the system call returns normally
			proc_array[p].p_state = P_EMPTY; // Clean up
		  }
	  else { // we should kill it
	    proc_array[p].p_state = P_EMPTY;
	    proc_array[p].p_exit_status = KILLED;
	    if (proc_array[p].waiter != NULL) // if there is any process waiting for the killed
	      {
		proc_array[p].waiter->p_state = P_RUNNABLE; // make the process runnable
		proc_array[p].waiter->p_registers.reg_eax = proc_array[p].p_exit_status;
		// return the exit status of the child process
	      }
	         current->p_registers.reg_eax = 0; // 0 means the system call returns normally
	      }
	   run(current);
	  }
	  In mpos-app.h:
	     added a new function sys_kill(pid_t)
	     	   static inline int 
		   	  sys_kill(pid_t pid)
			  {
				int retval;
  				asm volatile("int %1\n"
	 			      	     : "=a" (retval)
	    			             : "i" (INT_SYS_KILL),
					       "a" (pid)
	   				     : "cc", "memory");
  				return retval;
			  }
	In mpos-app2.c:
	   added a new version of run-child:
	   void
	   run_child(void)
	   {
	   	int input_counter = counter;

		counter++;		/* Note that all "processes" share an address
				   space, so this change to 'counter' will be
				   visible to all processes. */
      		pid_t pid = sys_getpid();
		if (pid % 2 == 0) 
		  {
		      int i;
	 	      for (i = 3; i < NPROCS; i+=2) // we don't want to kill main process
	 		sys_kill(i);
		  }
		
		app_printf("Process %d lives, counter %d!\n",
		  pid, input_counter);
	  	sys_exit(input_counter);
	   }
